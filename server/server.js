/**
 * O2Yolo Server Emulator
 * @author Estrol
 * @email support@entrosbot.xyz
 * 
 * NOTE: This server only support 1 player aka. SinglePlayer mode!
 * TODO: Check the TCP connection if game close that's it
 */


const express = require('express');
const net = require('net');
const path = require('path');
const { Buffer } = require('buffer');

/**
 * O2-JAM Server Emulator called YOLO PROJECT!
 */
class YoloEmulator {

    /**
     * Constructor of YoloEmulatorServer
     * @param {Number} serverPort 
     * @param {Number} webPort 
     */
    constructor(serverPort, webPort) {
        this.WS = net.createServer();
        this.WS.listen(serverPort, () => {
            console.log(`Socket ready on port: ${serverPort}`);
        })

        this.Express = express()
        this.Express.listen(webPort, () => {
            console.log(`Webpage ready on port: ${webPort}`);
        });
        this.initExpress()

        this.ListDevices = new Map();
        this.WaitUserPassword = new Map();
        this.UserLogin = new Map();
        this.ConnectionNo = 0;

        this.WS.on('connection', (socket) => {
            this.onConnection(socket);
        })
    }

    initExpress() {
        this.Express.get('/Patch/b.info', (req, res) => {
            res.sendFile(path.resolve(__dirname + '/sconf/Patch/b.info'))
        });

        this.Express.get('/Patch/a.html', (req, res) => {
            res.sendFile(path.resolve(__dirname + '/sconf/Patch/a.html'))
        });

        this.Express.use((req, res) => {
            res.status(404);
            const rPath = path.resolve(__dirname + '/sconf/404.html')

            res.sendFile(rPath);
        })
    }

    /**
     * Any incoming connection!
     * @param {net.Socket} socket 
     */
    onConnection(socket) {
        console.log('A client login in!');
        this.ListDevices.set(socket, this.ConnectionNo);
        this.ConnectionNo++;

        socket.setKeepAlive(true, 5000);

        socket.on('data', buffer => {
            this.onTCPData(socket, buffer);
        });

        socket.on('end', () => {
            console.log('Client disconnected!');
            this.ListDevices.delete(socket);
        })

        socket.on('error', (error) => {
            if (error.message !== "read ECONNRESET") {
                console.log(error);
            }
        });
    }

    /**
     * Handle TCP Buffer!
     * @param {net.Socket} socket 
     * @param {Buffer} buffer 
     */
    onTCPData(socket, buffer) {
        const { address } = socket.address()
        const packetID = buffer.slice(0, 2).toString('hex');
        const bufferData = buffer.slice(2, buffer.length).toString('hex');

        this.sendLog(socket, "client", buffer.toString('hex'));

        switch (packetID) {
            case '0400': {
                switch (bufferData) { // Still no idea why I do this, since most packet ID mostly from this.
                    case "f0ff": {
                        this.sendLog(socket, "info", "Socket disconnected!");
                        socket.destroy();
                        break;
                    }

                    case "ea03": {
                        const bufferRes = Buffer.from('440feb032c0100000000000000000000000000000100000100780000000000000001000002007800000000000000010000030078000000000000000100000400780000000000000001000005007800000000000000010000060078000000000000000100000700780000000000000001000008007800000000000000010000090078000000000000000100000a0078000000000000000100000b0078000000000000000100000c0078000000000000000100000d0078000000000000000100000e0078000000000000000100000fhex')
                        this.sendLog(socket, "Server", bufferRes.toString('hex'));
                        socket.write(bufferRes);
                        break;
                    }

                    case "f303": {
                        const bufferRes = Buffer.from('3700f40340ba1136840d407b78642ac9c519ccaa7db1653b701e6c18580f0522d808c8d71c1536840d407b78642ac9c519ccaa7db165ef', 'hex');
                        this.sendLog(socket, "Server", "Resuming client session!");
                        this.sendLog(socket, "Server", bufferRes.toString('hex'));
                        this.WaitUserPassword.set(address, true);
                        socket.write(bufferRes);
                        break;
                    }

                    case "d007": {
                        const bufferRes = Buffer.from('6001d107000000004f32596f6c6f0001ec12020010270000000000006400000054030000af01000071020000bd30050000000000007102000000000000710200007102000071020000000000007102000071020000710200000000000071020000230000000000000000000000720100000000000000000000000000009900000000000000000000009b0000000000000000000000950000009d0000009300000000000000970000009f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000000ef00000109011e0140014e01500151015701590184018a019301bb01dd01e101e201e301e4010000000000000000000000000000070000009d000000e70300009b000000e703000099000000e703000097000000e703000093000000e703000095000000e70300009f000000e7030000', 'hex');
                        this.sendLog(socket, "Server", bufferRes.toString('hex'));
                        socket.write(bufferRes);
                        break;
                    }

                    case "be0f": {
                        const bufferRes = Buffer.fromhex');
                        this.sendLog(socket, "Server", bufferRes.toString('hex'));
                        socket.write(bufferRes);
                        break;
                    }

                    case "a413": {
                        this.sendLog(socket, "info", "Sending message of the day!");
                        const bufferRes = Buffer.from('3100dd07496e666f004f32596f6c6f456d752120506f776572656420427920457374726f6c277320446576205465616d001b00db07010000004f32456d75303031004f32456d750025000000580ad3077800000000000000000000000000ff000000000000000000000001000000000000000000ff000000000000000000000002000000000000000000ff000000000000000000000003000000000000000000ff000000000000000000000004000000000000000000ff000000000000000000000005000000000000000000ff000000000000000000000006000000000000000000ff000000000000000000000007000000000000000000ff000000000000000000000008000000000000000000ff000000000000000000000009000000000000000000ff00000000000000000000000a000000000000000000ff00000000000000000000000b000000000000000000ff00000000000000000000000c000000000000000000ff00000000000000000000000d000000000000000000ff00000000000000000000000e000000000000000000ff00000000000000000000000f000000000000000000ff000000000000000000000010000000000000000000ff000000000000000000000011000000000000000000ff000000000000000000000012000000000000000000ff000000000000000000000013000000000000000000ff000000000000000000000014000000000000000000ff000000000000000000000015000000000000000000ff000000000000000000000016000000000000000000ff000000000000000000000017000000000000000000ff000000000000000000000018000000000000000000ff000000000000000000000019000000000000000000ff00000000000000000000001a000000000000000000ff00000000000000000000001b000000000000000000ff00000000000000000000001c000000000000000000ff00000000000000000000001d000000000000000000ff00000000000000000000001e000000000000000000ff00000000000000000000001f000000000000000000ff000000000000000000000020000000000000000000ff000000000000000000000021000000000000000000ff000000000000000000000022000000000000000000ff000000000000000000000023000000000000000000ff000000000000000000000024000000000000000000ff000000000000000000000025000000000000000000ff000000000000000000000026000000000000000000ff000000000000000000000027000000000000000000ff000000000000000000000028000000000000000000ff000000000000000000000029000000000000000000ff00000000000000000000002a000000000000000000ff00000000000000000000002b000000000000000000ff00000000000000000000002c000000000000000000ff00000000000000000000002d000000000000000000ff00000000000000000000002e000000000000000000ff00000000000000000000002f000000000000000000ff000000000000000000000030000000000000000000ff000000000000000000000031000000000000000000ff000000000000000000000032000000000000000000ff000000000000000000000033000000000000000000ff000000000000000000000034000000000000000000ff000000000000000000000035000000000000000000ff000000000000000000000036000000000000000000ff000000000000000000000037000000000000000000ff000000000000000000000038000000000000000000ff000000000000000000000039000000000000000000ff00000000000000000000003a000000000000000000ff00000000000000000000003b000000000000000000ff00000000000000000000003c000000000000000000ff00000000000000000000003d000000000000000000ff00000000000000000000003e000000000000000000ff00000000000000000000003f000000000000000000ff000000000000000000000040000000000000000000ff000000000000000000000041000000000000000000ff000000000000000000000042000000000000000000ff000000000000000000000043000000000000000000ff000000000000000000000044000000000000000000ff000000000000000000000045000000000000000000ff000000000000000000000046000000000000000000ff000000000000000000000047000000000000000000ff000000000000000000000048000000000000000000ff000000000000000000000049000000000000000000ff00000000000000000000004a000000000000000000ff00000000000000000000004b000000000000000000ff00000000000000000000004c000000000000000000ff00000000000000000000004d000000000000000000ff00000000000000000000004e000000000000000000ff00000000000000000000004f000000000000000000ff000000000000000000000050000000000000000000ff000000000000000000000051000000000000000000ff000000000000000000000052000000000000000000ff000000000000000000000053000000000000000000ff000000000000000000000054000000000000000000ff000000000000000000000055000000000000000000ff000000000000000000000056000000000000000000ff000000000000000000000057000000000000000000ff000000000000000000000058000000000000000000ff000000000000000000000059000000000000000000ff00000000000000000000005a000000000000000000ff00000000000000000000005b000000000000000000ff00000000000000000000005c000000000000000000ff00000000000000000000005d000000000000000000ff00000000000000000000005e000000000000000000ff00000000000000000000005f000000000000000000ff000000000000000000000060000000000000000000ff000000000000000000000061000000000000000000ff000000000000000000000062000000000000000000ff000000000000000000000063000000000000000000ff000000000000000000000064000000000000000000ff000000000000000000000065000000000000000000ff000000000000000000000066000000000000000000ff000000000000000000000067000000000000000000ff000000000000000000000068000000000000000000ff000000000000000000000069000000000000000000ff00000000000000000000006a000000000000000000ff00000000000000000000006b000000000000000000ff00000000000000000000006c000000000000000000ff00000000000000000000006d000000000000000000ff00000000000000000000006e000000000000000000ff00000000000000000000006f000000000000000000ff000000000000000000000070000000000000000000ff000000000000000000000071000000000000000000ff000000000000000000000072000000000000000000ff000000000000000000000073000000000000000000ff000000000000000000000074000000000000000000ff000000000000000000000075000000000000000000ff000000000000000000000076000000000000000000ff000000000000000000000077000000000000000000ff0000000000000000000000', 'hex');
                        this.sendLog(socket, "Server", bufferRes.toString('hex'));
                        socket.write(bufferRes);
                        break;
                    }

                    case "d207": {
                        this.sendLog(socket, "info", "Client enter channel!");
                        // No idea why this, probably only for data?
                        break;
                    }

                    case "7117": {
                        const bufferRes = Buffer.from('04007117', 'hex');
                        this.sendLog(socket, "Info", "Keep-Alive check!")
                        this.sendLog(socket, "Server", bufferRes.toString('hex'));
                        socket.write(bufferRes)
                        break;
                    }

                    case "f103": {
                        const bufferRes = Buffer.from('3700f2030200005dfedaadf57f6b0e492c3bba5617bb8b4c1d072880d2510cda544ad1503561a8fe67b5aae18b5d7c7b2aac22c302f81e', 'hex');
                        this.sendLog(socket, "Server", bufferRes.toString('hex'));
                        this.WaitUserPassword.set(address, true);
                        socket.write(bufferRes);
                        break;
                    }

                    default: {
                        this.sendLog(socket, "info", `[Unknown] [${packetID}] ${bufferData}]`);
                        break;
                    }
                }
                break;
            }

            case '0c00': {
                const bufferRes = Buffer.from('0800E90300000000', 'hex');
                this.sendLog(socket, "Server", bufferRes.toString('hex'));
                socket.write(bufferRes);
                break;
            }

            case '0800': {
                const bufferRes = Buffer.from('1000ED03000000000000000087530000', 'hex');
                this.sendLog(socket, "Server", bufferRes.toString('hex'));
                socket.write(bufferRes);
                break;
            }

            default: {
                const waitUser = this.WaitUserPassword.get(address);
                if (waitUser) {
                    const isUserLogin = this.UserLogin.get(address);
                    if (isUserLogin) { // Not sure why there 2 login payload!
                        const bufferRes = Buffer.from('0800E90300000000', 'hex');
                        this.sendLog(socket, "Server", bufferRes.toString('hex'));
                        socket.write(bufferRes);
                    } else { // And this why always different packet ID
                        const bufferRes = Buffer.from('0c00f00300000000ee600100', 'hex');
                        this.sendLog(socket, "Server", bufferRes.toString('hex'));
                        this.sendLog(socket, "info", "User loggin!");
                        socket.write(bufferRes);

                        this.UserLogin.set(address, true);
                    }

                    this.WaitUserPassword.delete(address);
                } else {
                    console.log(`Unhandled HexData: [${packetID}] ${bufferData}`);
                }
                break;
            }
        }   
    }

    /**
     * Send log to console
     * @param {net.Socket} socket 
     * @param {"server"|"client"|"info"} type
     * @param {String} msg 
     */
    sendLog(socket, type, msg) {
        const socketID = this.ListDevices.get(socket);
        let typeSTR;

        switch (type.toLowerCase()) {
            case "client":
                typeSTR = "Received";
                break;
            
            case "server":
                typeSTR = "Sended";
                break;

            case "info":
                typeSTR = "Info";
                break;

            default:
                typeSTR = "nil";
                break;
        }

        if (msg.length > 100) {
            const count = msg.slice(100, msg.length).length;
            msg = msg.slice(0, 100) + ` ...${count} Characters more!`;
        }

        console.log(`[Socket: ${socketID}] [${typeSTR}] ${msg}`);

        return true;
    }

}

new YoloEmulator(15010, 15000);